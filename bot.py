import asyncio
import json
import re
from copy import deepcopy
from collections import deque
from datetime import datetime
from telethon import TelegramClient, events
from secret import api_id, api_hash

# Server closed the connection: [WinError 121] The semaphore timeout period has expired
# await client.pin_message(chat, message, notify=False)

# quick replace
# "üö®": "üî¥üî¥üî¥",
# "üü¢": "üü¢üü¢üü¢"

client = TelegramClient("user_session", api_id, api_hash)
client.parse_mode = "html"
message_stack = deque(maxlen=4) # –°—Ç–µ–∫ –¥–ª—è –ø—Ä–∏—á–∏–Ω —Ç—Ä–∏–≤–æ–≥–∏
message_count = 0

state_defaults = {
    "is_alarm": False,
    "is_show_next_event": False,
    "current_channel": None,
    "last_message": "",
    "alarm_start_time": datetime.now()
}

try:
    with open("channels.json", "r", encoding="utf-8") as f:
        CHANNELS = {int(k): v for k, v in json.load(f).items()}
    with open("dict.json", "r", encoding="utf-8") as f:
        TRANSLATION_DICT = json.load(f)
    with open("state.json", "r", encoding="utf-8") as f:
        client.state = json.load(f)
    with open("settings.json", "r", encoding="utf-8") as f:
        general_settings = json.load(f)
except FileNotFoundError:
    print("[ERROR] –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    raise
except json.JSONDecodeError:
    print("[ERROR] –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É json.")
    raise

client.state = {**state_defaults, **client.state}
print(f"[INFO] client.state = {client.state}")

for key in ("alarm_start_time",):
    if isinstance(client.state.get(key), str):
        client.state[key] = datetime.fromisoformat(client.state[key])

MAX_MESSAGE_ROWS = general_settings["max_message_rows"]
MESSAGE_TTL = general_settings["message_ttl"]
ALARM_START_KEYWORD = general_settings["alarm_start_keyword"]
ALARM_END_KEYWORD = general_settings["alarm_end_keyword"]
CONTINUE_SYMBOLS = general_settings["continue_symbols"]
TARGET_CHANNEL_ID = general_settings["target_channel_id"]  # –ö–∞–Ω–∞–ª –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è


def correct_punctuation(raw_str: str) -> str:
    """
    –í–∏–ø—Ä–∞–≤–ª—è—î –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—é –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.
    
    Args:
        raw_str (str): –í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏.
    
    Returns:
        str: –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ç–µ–∫—Å—Ç —É –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ.
    """
    if raw_str:
        raw_str = raw_str.strip().replace(" ,", ",")
        raw_str = raw_str.replace(",", ", ")
        raw_str = re.sub(r'\s+', ' ', raw_str)

    return raw_str.lower()


def trunc_message(raw_str: str, trunc_word: str, continue_symbols: set) -> str:
    """
    –û–±—Ä—ñ–∑–∞—î —Ç–µ–∫—Å—Ç, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —Ä—è–¥–∫–∞, —â–æ –º—ñ—Å—Ç–∏—Ç—å trunc_word, —ñ –¥–æ —Ä—è–¥–∫–∞, 
    —è–∫–∏–π –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ —Å–∏–º–≤–æ–ª—ñ–≤ —ñ–∑ continue_symbols.
    
    Args:
        raw_str (str): –í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏.
        trunc_word (str): –°–ª–æ–≤–æ, –∑ —è–∫–æ–≥–æ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –æ–±—Ä—ñ–∑–∫–∞.
        continue_symbols (set): –ù–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤, —è–∫—ñ –¥–æ–∑–≤–æ–ª—è—é—Ç—å –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É.
    
    Returns:
        str: –û–±—Ä—ñ–∑–∞–Ω–∏–π —Ç–µ–∫—Å—Ç, –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞–ª—å–Ω–∏—Ö –ø—Ä–æ–±—ñ–ª—ñ–≤.
    """
    if not raw_str or not trunc_word:
        return ""
    
    result_lines = []
    is_processing = False
    lines = raw_str.split("\n")
    
    for line in lines:
        if is_processing:
            if line.strip() and line.strip()[0] not in continue_symbols:
                break
            result_lines.append(line)
            
        elif trunc_word in line.lower():
            result_lines.append(line)
            is_processing = True

    return "\n".join(result_lines).strip()


def replace_whole_words(text: str, translate_dict: dict) -> str:
    """
    –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–ª–æ–≤–Ω–∏–∫.
    
    Args:
        text (str): –í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏.
        translate_dict (dict): –°–ª–æ–≤–Ω–∏–∫ –∑ –ø–∞—Ä–∞–º–∏ —Å–ª—ñ–≤.
    
    Returns:
        str: –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç.
    """
    pattern = r'\b(' + '|'.join(re.escape(key) for key in translate_dict.keys()) + r')\b'
    return re.sub(pattern, lambda m: translate_dict[m.group()], text.lower())


def calculate_length_hm(diff: datetime) -> tuple:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ –≥–æ–¥–∏–Ω–∏ —ñ —Ö–≤–∏–ª–∏–Ω–∏.
    
    Args:
        diff (datetime): –†—ñ–∑–Ω–∏—Ü—è –º—ñ–∂ –¥–≤–æ–º–∞ datetime.
    
    Returns:
        tuple: –ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–¥–∏–Ω–∏ —ñ —Ö–≤–∏–ª–∏–Ω–∏.
    """
    total_secs = int(diff.total_seconds())
    return total_secs // 3600, (total_secs % 3600) // 60
    

def make_set(message: str) -> set:
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Ä—è–¥–æ–∫ –Ω–∞ –º–Ω–æ–∂–∏–Ω—É.
    
    Args:
        message (str): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    
    Returns:
        set: –ü–æ–≤–µ—Ä—Ç–∞—î –º–Ω–æ–∂–∏–Ω—É –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.
    """
    return set([word.lower().strip()[:9] for word in message.split()])


def is_similar(message1: str, message2: str) -> bool:
    """
    –ü–æ—Ä—ñ–≤–Ω—é—î –¥–≤–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    
    Args:
        message1 (str): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 1.
        message1 (str): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è 2.
    
    Returns:
        bool: –ü–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —Å–ø—ñ–≤–ø–∞–ª–æ 50% —Å–ª—ñ–≤ —á–∏ –±—ñ–ª—å—à–µ.
    """
    set1 = make_set(message1)
    set2 = make_set(message2)
    match_rate = len(set1.intersection(set2)) / max(len(set1), len(set2))

    return match_rate >= 0.5


def select_reason(message_stack: deque, base_time: datetime, message_ttl=MESSAGE_TTL) -> str:
    """
    –û–±–∏—Ä–∞—î –Ω–∞–π–∫–æ—Ä–æ—Ç—à—É –ø—Ä–∏—á–∏–Ω—É –∑—ñ —Å—Ç–µ–∫—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
    
    Args:
        message_stack (deque): –°—Ç–µ–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å.
        base_time (str): –ß–∞—Å, –≤—ñ–¥ .
    
    Returns:
        str: –ü–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–∫–æ—Ä–æ—Ç—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """
    valid_reasons = [m[1] for m in message_stack if (base_time - m[0]).total_seconds() <= message_ttl]
    return min(valid_reasons, key=len, default="")


async def send_messages(messages_to_send: list) -> None:
    """
    –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.
    
    Args:
        messages_to_send (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ –¥–∞–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    
    Returns:
        None.
    """
    for message in messages_to_send:

        target_channel_id = message.get("target_channel_id", TARGET_CHANNEL_ID)
        file = message.get("file", None)
        message_text = message.get("message_text", "_–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è_")
        silent = message.get("silent", False)

        try:
            if file:
                print("[INFO] –ó–∞—Ä–∞–∑ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é.")
                await client.send_file(target_channel_id, file=file, caption=message_text, silent=silent)
            else:
                print(f"[INFO] –ó–∞—Ä–∞–∑ –±—É–¥–µ–º–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø—Ä–æ—Å—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n{message_text}")
                await client.send_message(target_channel_id, message_text, silent=silent)
        except Exception as e:
            print(f"[ERROR] –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")


def exception_handler(func):

    async def wrapper(event):
        try:
            return await func(event)
        except Exception as e:
            channel_name = "–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–∞–ª"
            if hasattr(event, 'chat_id') and event.chat_id in CHANNELS:
                channel_name = CHANNELS[event.chat_id].get('name', '–Ω–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–∞–ª')
            
            print(f"[ERROR] [{datetime.now().strftime('%H:%M:%S')}] –ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ '{channel_name}': {e}")
    return wrapper


@client.on(events.NewMessage(chats=list(CHANNELS.keys())))
@exception_handler
async def handler(event):

    global message_stack
    global message_count

    message_text = event.raw_text
    channel_id = event.chat_id
    messages_to_send = []

    config = CHANNELS.get(channel_id, {})
    keywords = config.get("keywords", [])
    trunc_word = config.get("truncword", "")
    name = config.get("name", "–Ω–µ–≤—ñ–¥–æ–º–∏–π")
    url = config.get("url", "")
    is_filter_stopwords = config.get("isfilterstopwords", False) 
    stop_length = config.get("stoplength", 0)
    stopwords = config.get("stopwords", [])
    deletewords = config.get("deletewords", [])
    is_silent = config.get("issilent", False)
    is_save_for_alarm = config.get("issaveforalarm", False)
    is_forward_images = config.get("isforwardimages", False)
    is_trunc_message = config.get("istruncmessage", False)
    is_correct_punctuation = config.get("iscorrectpunctuation", False)
    is_alarm_source = config.get("isalarmsource", False)
    is_translate = config.get("istranslate", False)
    is_delete_words = config.get("isdeletewords", False)

    state = client.state
    now = datetime.now()
    other_reasons = ""

    print(f"\n[INFO] [{now.strftime('%H:%M:%S')}] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ '{name}':\n{message_text or "[EMPTY]"}\n")

    if not message_text and not is_forward_images:
        print("[INFO] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—É—Å—Ç–µ —ñ –Ω–µ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ—Å–∏–ª–∞—Ç–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É - –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–ª—ñ!")
        return
    
    if is_save_for_alarm and not state["is_alarm"]: # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –∫–∞–Ω–∞–ª—ñ–≤-–¥–∂–µ—Ä–µ–ª —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ç—Ä–∏–≤–æ–≥—É
        if is_trunc_message and trunc_word in message_text: # –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –æ–±—Ä—ñ–∑–∞—Ç–∏ - —Ç–æ –æ–±—Ä—ñ–∑–∞—î–º–æ
            message_text = trunc_message(message_text, trunc_word, CONTINUE_SYMBOLS)
        message_stack.append([now, message_text]) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç —ñ —á–∞—Å
        print(f"[INFO] –¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–µ —É —Å—Ç–µ–∫ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Ç—Ä–∏–≤–æ–≥–∏.")
    # tmp
    else:
        if not is_save_for_alarm:
            print("[INFO] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É —É —Å—Ç–µ–∫ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è.")
        else:
            print("[INFO] –ó–∞—Ä–∞–∑ —Ç—Ä–∏–≤–æ–≥–∞, —Ç–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Å—Ç–µ–∫ –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è.")
    # tmp end

    if state["is_show_next_event"]: # –Ø–∫—â–æ —Ç—Ä–µ–±–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        state["is_show_next_event"] = False
        if is_trunc_message and trunc_word in message_text: # –Ø–∫—â–æ —Ä–∞–ø—Ç–æ–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º–æ–∂–Ω–∞ –æ–±—Ä—ñ–∑–∞—Ç–∏ - —Ç–æ –æ–±—Ä—ñ–∑–∞—î–º–æ
            message_text = trunc_message(message_text, trunc_word, CONTINUE_SYMBOLS)
        messages_to_send.append({"message_text": f"–ô–º–æ–≤—ñ—Ä–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∏:\n{message_text}\n(<i>{url}</i>)", "silent": True})

    for keyword in keywords:

        if keyword.lower() in message_text.lower():

            if is_filter_stopwords:
                if len(message_text) > stop_length or any(stop_word in message_text for stop_word in stopwords):
                    print(f"[INFO] –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ '{keyword}', –∞–ª–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–µ.")
                    break

            # –ë–ª–æ–∫ –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É. –≤–∏–Ω–µ—Å—Ç–∏ —É —Ñ—É–Ω–∫—Ü—ñ—é
            if is_correct_punctuation: # –ö–æ—Ä–µ–∫—Ü—ñ—è –ø—É–Ω–∫—Ç—É–∞—Ü—ñ—ó
                message_text = correct_punctuation(message_text)

            if is_translate: # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —ñ –ø–µ—Ä–µ–∫–ª–∞–¥ —Ç–µ–∫—Å—Ç—É
                message_text = replace_whole_words(message_text, TRANSLATION_DICT).capitalize()
            
            if is_delete_words: # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª—ñ–≤ –∑ –ø–µ—Ä–µ–ª—ñ–∫—É
                for delete_word in deletewords:
                    message_text = message_text.replace(delete_word, "")
                message_text = message_text.strip()

            if is_trunc_message and len(message_text.split("\n")) > MAX_MESSAGE_ROWS: # –û–±—Ä—ñ–∑–∞–Ω–Ω—è –∑–∞–π–≤–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
                message_text = trunc_message(message_text, trunc_word, CONTINUE_SYMBOLS)
            # –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É –æ–±—Ä–æ–±–∫–∏ —Ç–µ–∫—Å—Ç—É

            additional_message = ""

            # –ë–ª–æ–∫ –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥–∏ —ñ –≤—ñ–¥–±–æ—é. –≤–∏–Ω–µ—Å—Ç–∏ —É —Ñ—É–Ω–∫—Ü—ñ—é
            if is_alarm_source:

                if keyword == ALARM_START_KEYWORD:
                    state["is_alarm"] = True
                    state["alarm_start_time"] = now
                    print(f"[INFO] –ü–æ—á–∞—Ç–æ–∫ —Ç—Ä–∏–≤–æ–≥–∏ –æ {now.strftime('%H:%M:%S')}")
                    reason = select_reason(message_stack, now)
                    if reason:
                        additional_message = f"\n<i>–ô–º–æ–≤—ñ—Ä–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∏:\n{reason}</i>"
                        # –í–∏–Ω–µ—Å—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ —É —Ñ—É–Ω–∫—Ü—ñ—é?
                        other_reasons = "\n".join(f"<blockquote>{other_reason}</blockquote>" for other_reason in [m[1] for m in message_stack if m[1] != reason and len(m[1].split("\n")) < 2 * MAX_MESSAGE_ROWS and (now - m[0]).total_seconds() <= 2 * MESSAGE_TTL])
                    else:
                        state["is_show_next_event"] = True
                        additional_message = f"\n<i>–ô–º–æ–≤—ñ—Ä–Ω–∞ –ø—Ä–∏—á–∏–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞.\n–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—Ä–∏—á–∏–Ω—É –≤ –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ.</i>"

                elif keyword == ALARM_END_KEYWORD:
                    state["is_alarm"] = False
                    hours, minutes = calculate_length_hm(now - state["alarm_start_time"])
                    additional_message = f"\n<i>–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {hours} –≥. {minutes} —Ö–≤.</i>"

                message_text = f"<b>{message_text}</b>"
                message_count = 50 # –¢–µ—Ä–º—ñ–Ω–æ–≤–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
            # –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–æ–≥–∏ —ñ –≤—ñ–¥–±–æ—é

            # –î–æ–¥–∞—î–º–æ –º—ñ—Ç–∫—É –∫–∞–Ω–∞–ª—É-–¥–∂–µ—Ä–µ–ª–∞
            if state["current_channel"] != channel_id:
                message_text += f"\n<i>({url})</i>"
                state["current_channel"] = channel_id
            
            if not is_similar(message_text, state["last_message"]):

                if is_forward_images and event.photo:
                    print("[INFO] –Ñ –∫–∞—Ä—Ç–∏–Ω–∫–∞! –°–ø—Ä–æ–±—É—î–º–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏.")
                    messages_to_send.append({"file": event.photo, "message_text": f"{message_text}{additional_message}", "silent": is_silent})
                else:
                    print("[INFO] –ó–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç.")
                    messages_to_send.append({"message_text": f"{message_text}{additional_message}", "silent": is_silent})
                print(f"[INFO] –ó–Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ '{keyword}' ‚Äî –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ.")

                if other_reasons:
                    messages_to_send.append({"message_text": f"–Ü–Ω—à—ñ –º–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏ —Ç—Ä–∏–≤–æ–≥–∏:\n{other_reasons}", "silent": True})
                    print(f"[INFO] –Ü–Ω—à—ñ –ø—Ä–∏—á–∏–Ω–∏:\n{other_reasons}")
                
            else:
                print(f"[INFO] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–µ: '{message_text}' —Å—Ö–æ–∂–µ –Ω–∞ '{state["last_message"]}'.")

            state["last_message"] = message_text # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–µ–∫—Å—Ç –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

            message_count += 1
            if message_count >= 30:
                # –ë–ª–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É. –í–∏–Ω–µ—Å—Ç–∏ —É —Ñ—É–Ω–∫—Ü—ñ—é
                state_copy = deepcopy(client.state)
                state_copy["alarm_start_time"] = state_copy["alarm_start_time"].isoformat()

                with open("state.json", "w", encoding="utf-8") as f:
                    json.dump(state_copy, f, indent=4)
                # –ö—ñ–Ω–µ—Ü—å –±–ª–æ–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É
                message_count = 0

            break # –ó—É–ø–∏–Ω—è—î –ø–µ—Ä–µ–±—ñ—Ä –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤, —è–∫—â–æ –±—É–ª–æ —Ö–æ—á –æ–¥–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è
    else:
        print(f"[INFO] –ö–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    if messages_to_send:
        await send_messages(messages_to_send)


async def main():
    await client.start()
    print(f"[INFO] [{datetime.now().strftime('%H:%M:%S')}] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π.")

    #   temporary
    # messages_to_send_tmp = []
    # m_text = "<blockquote>–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü–∏—Ç–∞—Ç.\n–î—Ä—É–≥–∏–π —Ä—è–¥–æ–∫.</blockquote><b>–ñ–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç!<b><i>–ö—É—Ä—Å–∏–≤–Ω–∏–π —Ç–µ–∫—Å—Ç.</i>"
    # messages_to_send_tmp.append({"message_text": m_text, "silent": True})
    # await send_messages(messages_to_send_tmp)
    #   temporary end

    await client.run_until_disconnected()


if __name__ == "__main__":
    asyncio.run(main())